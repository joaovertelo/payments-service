openapi: 3.0.3
info:
  title: Swagger Users - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v1
tags:
  - name: authentication
    description: Operations about auth
  - name: users
    description: Operations about user
  - name: profiles
    description: Operations about profile
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Create a user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserApiRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiResponse'
  /users/{id}:
    get:
        tags:
          - users
        summary: Get users
        description: Get users.
        operationId: getAllUsers
        parameters:
          - name: id
            in: path
            description: User Id
            required: true
            schema:
              type: string
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserApiResponse'
  /payment-methods/{userId}:
    post:
      tags:
        - payment-methods
      summary: Create a payment method
      description: Create a payment method.
      operationId: createPaymentMethod
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      requestBody:
        description: Payment method request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodApiRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodApiResponse'
    get:
      tags:
        - payment-methods
      summary: Get Payment Methods
      description: Get Payment Methods.
      operationId: getPaymentMethodsByUserId
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethodApiResponse'
  /payments:
    post:
      tags:
        - payments
      summary: Create a payment
      description: Create a payment request.
      operationId: createPayment
      requestBody:
        description: payment request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentApiRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentApiResponse'
    get:
      tags:
        - payments
      summary: Get Payments
      description: Get all payments.
      operationId: getAllPayments
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentApiResponse'
components:
  schemas:
    UserApiRequest:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        name:
          type: string
          example: João Vertelo
    UserApiResponse:
      type: object
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        name:
          type: string
          example: João Vertelo
        createdAt:
          type: string
          example: 2023-07-02T23:26:02+0000
        updatedAt:
          type: string
          example: 2023-07-02T23:26:02+0000
    PaymentMethodApiRequest:
      type: object
      required:
        - userId
        - amountLimit
      properties:
        userId:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        amountLimit:
          type: string
          example: amount limit in cents
        active:
          type: boolean
          example: true
    PaymentMethodApiResponse:
      type: object
      required:
        - userId
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        userId:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        amountLimit:
          type: string
          example: amount limit in cents
        active:
          type: boolean
          example: true
    PaymentApiRequest:
      type: object
      required:
        - type
        - amount
        - sync
      properties:
        type:
          type: string
          enum:
            - DEBIT
            - CREDIT
            - VOUCHER
          example: DEBIT
        amount:
          description: amount in cents
          type: string
          example: 100
        installments:
          type: number
          example: 1
          minimum: 0
          maximum: 12
          default: 0
        sync:
          type: boolean
          example: false
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PAID
            - ERROR
          example: IN_PROGRESS
    PaymentApiResponse:
      type: object
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        userId:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        type:
          type: string
          enum:
            - DEBIT
            - CREDIT
            - VOUCHER
          example: DEBIT
        amount:
          description: amount in cents
          type: string
          example: 100
        installments:
          type: number
          example: 1
          minimum: 0
          maximum: 12
        sync:
          type: boolean
          example: false
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PAID
            - ERROR
          example: IN_PROGRESS
        createdAt:
          type: string
          example: 2023-07-02T23:26:02+0000
        updatedAt:
          type: string
          example: 2023-07-02T23:26:02+0000