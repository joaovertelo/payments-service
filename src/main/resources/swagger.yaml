openapi: 3.0.3
info:
  title: Swagger Users - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v1
tags:
  - name: authentication
    description: Operations about auth
  - name: users
    description: Operations about user
  - name: profiles
    description: Operations about profile
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Create a user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserApiRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiResponse'
    get:
      tags:
        - users
      summary: Get users
      description: Get users.
      operationId: getAllUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserApiResponse'
  /users/{id}:
    put:
      tags:
        - users
      summary: Update user
      description: Update a user.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateApiRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiResponse'
    get:
      tags:
        - users
      summary: Get user
      description: Get user.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiResponse'
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete user.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
components:
  schemas:
    UserApiRequest:
      type: object
      required:
        - username
        - name
      properties:
        username:
          type: string
          example: myUser
        email:
          type: string
          example: joao@gmail.com
        password:
          type: string
          example: '12345'
    UserUpdateApiRequest:
      type: object
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    UserApiResponse:
      type: object
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          example: USER
        createdAt:
          type: string
          example: 2023-07-02T23:26:02+0000
        updatedAt:
          type: string
          example: 2023-07-02T23:26:02+0000